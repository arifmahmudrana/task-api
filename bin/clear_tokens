#!/usr/bin/env node
const redis = require('redis');
const fmt = require('util').format;
const bluebird = require('bluebird');

bluebird.promisifyAll(redis);
const db = redis.createClient(process.env.REDIS_URL);
const { formats } = require('../src/models/OAuth');

let accessTokenKeys = [];
const getAllAccessTokens = (cursor = 0) =>
  db.scanAsync(cursor, 'MATCH', fmt(formats.accessToken, '*')).then(result => {
    accessTokenKeys = [...accessTokenKeys, ...result[1]];
    if (result[0] === '0') return accessTokenKeys;
    return getAllAccessTokens(result[0]);
  });
const accToken = getAllAccessTokens()
  .then(values => {
    const promises = [];
    values.forEach(key => {
      const promise = db.getAsync(key).then(result => {
        result = JSON.parse(result);
        if (!result.accessTokenExpiresAt.length) {
          return key;
        }

        try {
          if (
            new Date(result.accessTokenExpiresAt).getTime() <
            new Date().getTime()
          ) {
            return key;
          }
        } catch (error) {
          return key;
        }
      });
      promises.push(promise);
    });

    return Promise.all(promises);
  })
  .then(keys => keys.filter(k => !!k));

let refreshTokenKeys = [];
const getAllRefreshTokens = (cursor = 0) =>
  db.scanAsync(cursor, 'MATCH', fmt(formats.refreshToken, '*')).then(result => {
    refreshTokenKeys = [...refreshTokenKeys, ...result[1]];
    if (result[0] === '0') return refreshTokenKeys;
    return getAllRefreshTokens(result[0]);
  });
const refToken = getAllRefreshTokens()
  .then(values => {
    const promises = [];
    values.forEach(key => {
      const promise = db.getAsync(key).then(result => {
        result = JSON.parse(result);
        if (!result.refreshTokenExpiresAt.length) {
          return key;
        }

        try {
          if (
            new Date(result.refreshTokenExpiresAt).getTime() <
            new Date().getTime()
          ) {
            return key;
          }
        } catch (error) {
          return key;
        }
      });
      promises.push(promise);
    });

    return Promise.all(promises);
  })
  .then(keys => keys.filter(k => !!k));

Promise.all([accToken, refToken])
  .then(keys => [...new Set([...keys[0], ...keys[1]])])
  .then(keys => {
    if (!keys.length) {
      console.log('No unused tokens found!!');
      process.exit(0);
      return;
    }
    console.log('Removing unused tokens: ', keys.join());
    return db.delAsync(keys).then(total => {
      console.log('Total tokens removed: ', total);
      process.exit(0);
    });
  })
  .catch(err => {
    console.log('Error occured: ', err);
    process.exit(1);
  });
